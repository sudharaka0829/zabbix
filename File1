#!/bin/bash

# DB2 connection details
DB_USER="your_db_username"
DB_PASS="your_db_password"
DB_NAME="your_db_name"

# Function to execute DB2 queries
execute_db2_query() {
    db2 connect to $DB_NAME user $DB_USER using $DB_PASS > /dev/null 2>&1
    db2 -x "$1"
}

# Function to get the database size
get_database_size() {
    execute_db2_query "SELECT DB_NAME, SUM(DATA_OBJECT_P_SIZE + INDEX_OBJECT_P_SIZE + LONG_OBJECT_P_SIZE) * PAGESIZE / 1024 / 1024 AS TOTAL_SIZE_MB FROM SYSIBMADM.ADMINTABINFO GROUP BY DB_NAME" | grep -v "DB_NAME" | awk '{print $1 ":" $2}'
}

# Function to get table usages
get_table_usages() {
    execute_db2_query "SELECT TABNAME, DATA_OBJECT_PAGES * PAGESIZE / 1024 / 1024 AS TABLE_SIZE_MB FROM SYSIBMADM.SNAPTABLES WHERE TABSCHEMA='your_schema_name'"
}

# Function to get buffer pool hit ratio
get_buffer_pool_hit_ratio() {
    execute_db2_query "SELECT BP_NAME, (100 - ((POOL_ASYNC_PAGES_READS + POOL_SYNC_PAGES_READS) * 100 / POOL_DATA_PAGES)) AS HIT_RATIO FROM SYSIBMADM.BP_HITRATIO"
}

# Function to get lock waits





get_lock_waits() {
    execute_db2_query "SELECT SUM(TOTAL_LOCK_WAITS) FROM SYSIBMADM.SNAPLOCK"
}

# Function to get active connections
get_active_connections() {
    execute_db2_query "SELECT COUNT(*) FROM SYSIBMADM.APPLICATIONS WHERE APPL_STATUS='UOW EXECUTING'"
}

# Function to get query execution times
get_query_execution_times() {
    execute_db2_query "SELECT AGENT_ID, EXECUTION_TIME FROM TABLE(MON_GET_AGENT('',-2)) AS AGENT"
}

# Function to get log file usage
get_log_file_usage() {
    execute_db2_query "SELECT TOTAL_LOG_AVAILABLE_PAGES * LOG_PAGE_SIZE / 1024 / 1024 AS LOG_FILE_USAGE_MB FROM SYSIBMADM.SNAPDB"
}

# Function to get index file usages
get_index_file_usages() {
    execute_db2_query "SELECT INDNAME, LEAF_BLOCKS * PAGESIZE / 1024 / 1024 AS INDEX_SIZE_MB FROM SYSIBMADM.SNAPINDEXES WHERE TABSCHEMA='your_schema_name'"
}

# Function to get index fragmentations
get_index_fragmentations() {
    execute_db2_query "SELECT INDNAME, (LEAF_NLEAF_DELLEAFS / LEAF_NLEAF_DELLEAFS_TOTAL_PAGES) * 100 AS FRAGMENTATION_PERCENTAGE FROM SYSIBMADM.SNAPINDEXES WHERE TABSCHEMA='your_schema_name'"
}

# Function to get buffer pool usages
get_buffer_pool_usages() {
    execute_db2_query "SELECT BP_NAME, POOL_USED_PAGES * PAGESIZE / 1024 / 1024 AS BUFFER_POOL_USAGE_MB FROM SYSIBMADM.SNAPBUFFERPOOL"
}

# Call functions to collect data
database_size=$(get_database_size)
table_usages=$(get_table_usages)
buffer_pool_hit_ratio=$(get_buffer_pool_hit_ratio)
lock_waits=$(get_lock_waits)
active_connections=$(get_active_connections)
query_execution_times=$(get_query_execution_times)
log_file_usage=$(get_log_file_usage)
index_file_usages=$(get_index_file_usages)
index_fragmentations=$(get_index_fragmentations)
buffer_pool_usages=$(get_buffer_pool_usages)

# Output data in a format readable by Zabbix
echo "DatabaseSize:$database_size"
echo "TableUsages:$table_usages"
echo "BufferPoolHitRatio:$buffer_pool_hit_ratio"
echo "LockWaits:$lock_waits"
echo "ActiveConnections:$active_connections"
echo "QueryExecutionTimes:$query_execution_times"
echo "LogFileUsage:$log_file_usage"
echo "IndexFileUsages:$index_file_usages"
echo "IndexFragmentations:$index_fragmentations"
echo "BufferPoolUsages:$buffer_pool_usages"


CallController-20240429_12hr.log 
CallController-(\d{8}_\d{2}hr)\.log,1
vfs.file.regexp[/tmp/CallController-(\d{8}_\d{2}hr)\.log,1]
Cannot open file: [2] No such file or directory

---------------------------------------------------------------------------


#!/bin/bash

# DB2 connection details
DB_USER="your_db_username"
DB_PASS="your_db_password"
DB_NAME="pegadb"

# Function to execute DB2 queries
execute_db2_query() {
    db2 connect to $DB_NAME > /dev/null 2>&1
    db2 -x "$1"
}

# Function to get the database size
get_database_size() {
    execute_db2_query "select sum(TBSP_USED_SIZE_KB) / 1024 / 1024 as DATABASE_SIZE from sysibmadm.TBSP_UTILIZATION" | grep -o '[0-9]*' | head -n1
}

# Function to get active connections
get_active_connections() {
    execute_db2_query "SELECT COUNT(*) FROM SYSIBMADM.APPLICATIONS WHERE APPL_STATUS='UOW EXECUTING'" |  tr -d [:space:]
}

# Function to get lock waits
get_lock_waits() {
    execute_db2_query "SELECT COUNT(*) FROM SYSIBMADM.LOCKWAITS;" |  tr -d [:space:]

}

# Function to get log file usage
get_log_file_usage() {
    execute_db2_query "select LOG_UTILIZATION_PERCENT from sysibmadm.MON_TRANSACTION_LOG_UTILIZATION" |  tr -d [:space:]
}

# Function to get table usages
get_table_usages() {
    execute_db2_query "SELECT TBSP_USED_PAGES * 100.0 / TBSP_TOTAL_PAGES AS USED_PERCENTAGE FROM SYSIBMADM.TBSP_UTILIZATION" | grep -v 'Division' |  tr -d [:space:]
}



# Call functions to collect data
database_size=$(get_database_size)
active_connections=$(get_active_connections)
lock_waits=$(get_lock_waits)
log_file_usage=$(get_log_file_usage)
table_usages=$(get_table_usages)


# Output data in a format readable by Zabbix
echo "DatabaseSize:$database_size"
echo "ActiveConnections:$active_connections"
echo "LockWaits:$lock_waits"
echo "LogFileUsage:$log_file_usage"
echo "TableUsages:$table_usages"

 db2 "SELECT  DECIMAL(POOL_CUR_BUFFSZ/1024/1024, 10, 2) FROM SYSIBMADM.MON_BP_UTILIZATION;"

SELECT 
    POOL_NAME,
    (TOTAL_HIT_RATIO * 100) AS BUFFER_POOL_HIT_RATIO_PERCENT
FROM 
    SYSIBMADM.BP_HITRATIO 


SELECT BP_NAME, DECIMAL(BP_CUR_BUFFSZ/1024/1024, 10, 2) AS POOL_CUR_BUFFSZ_MB
FROM TABLE(MON_GET_BUFFERPOOL(NULL, -2)) AS BP;
WHERE 
    DBPARTITIONNUM = <partition_number>; -- Optional: Specify the partition number if you're on a partitioned database.




db2 "SELECT BP_NAME, TOTAL_HIT_RATIO_PERCENT FROM SYSIBMADM.BP_HITRATIO"




SELECT BP_NAME, DECIMAL(BP_CUR_BUFFSZ/1024/1024, 10, 2) AS POOL_CUR_BUFFSZ_MB
FROM TABLE(MON_GET_BUFFERPOOL(NULL, -2)) AS BP;


 SELECT POOL_NAME, DECIMAL(POOL_CUR_BUFFSZ/1024/1024, 10, 2) FROM SYSIBMADM.MON_BP_UTILIZATION


SELECT POOL_NAME, 
       DECIMAL(POOL_USED_PAGES * 100.0 / POOL_TOTAL_PAGES, 5, 2) AS BUFFER_POOL_USAGE_PERCENT
FROM SYSIBMADM.MON_BP_UTILIZATION;










#!/bin/bash

# DB2 connection details
DB_USER="your_db_username"
DB_PASS="your_db_password"
DB_NAME="pegadb"

# Function to execute DB2 queries
execute_db2_query() {
    db2 connect to $DB_NAME > /dev/null 2>&1
    db2 -x "$1"
}
# Function to get lock waits
get_lock_waits() {
    execute_db2_query "SELECT COUNT(*) FROM SYSIBMADM.LOCKWAITS;"
}

lock_waits=$(get_lock_waits)
echo "LockWaits:$lock_waits"




#!/bin/bash

# DB2 connection details
DB_USER="your_db_username"
DB_PASS="your_db_password"
DB_NAME="pegadb"

# Function to execute DB2 queries
execute_db2_query() {
    db2 connect to $DB_NAME > /dev/null 2>&1
    db2 -x "$1"
}

# Function to get lock waits
get_lock_waits() {
    execute_db2_query "SELECT COUNT(*) FROM SYSIBMADM.LOCKWAITS;"
}

# Switch to db2inst1 user and execute the script
su - db2inst1 << EOF

# Run the function to get lock waits
lock_waits=\$(get_lock_waits)
echo "LockWaits:\$lock_waits"

EOF



#!/bin/bash

# DB2 connection details
DB_USER="your_db_username"
DB_PASS="your_db_password"
DB_NAME="pegadb"

# Function to execute DB2 queries
execute_db2_query() {
    db2 connect to $DB_NAME > /dev/null 2>&1
    db2 -x "$1"
}

# Function to get lock waits
get_lock_waits() {
    execute_db2_query "SELECT COUNT(*) FROM SYSIBMADM.LOCKWAITS;"
}

# Switch to db2inst1 user and execute the script
su - db2inst1 << EOF
source /home/db2inst1/sqllib/db2profile
export DB_USER="$DB_USER"
export DB_PASS="$DB_PASS"
export DB_NAME="$DB_NAME"

# Run the function to get lock waits
lock_waits=\$(get_lock_waits)
echo "LockWaits:\$lock_waits"

#!/bin/bash

# DB2 connection details
DB_USER="your_db_username"
DB_PASS="your_db_password"
DB_NAME="pegadb"

# Function to execute DB2 queries
execute_db2_query() {
    su - db2inst1 -c "db2 connect to $DB_NAME > /dev/null 2>&1 && db2 -x \"$1\""
}

# Function to get lock waits
get_lock_waits() {
    execute_db2_query "SELECT COUNT(*) FROM SYSIBMADM.LOCKWAITS;"
}

lock_waits=$(get_lock_waits)
echo "LockWaits:$zabbix ALL=(db2inst1) NOPASSWD: /path/to/your/script.sh



zabbix ALL=(db2inst1) NOPASSWD: /path/to/your/script.sh

What is this?








[root@ASOMDWFDB404 tmp]#  su - db2inst1 -c 'db2 connect to pegadb  && db2 -x "SELECT COUNT(*) FROM SYSIBMADM.LOCKWAITS;"'

   Database Connection Information

 Database server        = DB2/LINUXX8664 11.5.8.0
 SQL authorization ID   = DB2INST1
 Local database alias   = PEGADB

SQL1024N  A database connection does not exist.  SQLSTATE=08003















[db2inst1@ASOMDWFDB404 tmp]$ cat script.sh
#!/bin/bash

# DB2 connection details
DB_USER="db2inst1"
DB_PASS="abcd1234"
DB_NAME="pegadb"

# Function to execute DB2 queries
execute_db2_query() {
  echo "abcd1234" | su - db2inst1 -c "db2 connect to $DB_NAME USER $DB_USER USING $DB_PASS > /dev/null 2>&1 && db2 -x \"$1\""
}

# Function to get db status
get_lock_waits() {
    execute_db2_query "SELECT COUNT(*) FROM SYSIBMADM.LOCKWAITS;"
}

lock_waits=$(get_lock_waits)
echo "LockWaits:$lock_waits"

[db2inst1@ASOMDWFDB404 tmp]$ bash -x script.sh
+ DB_USER=db2inst1
+ DB_PASS=abcd1234
+ DB_NAME=pegadb
++ get_lock_waits
++ execute_db2_query 'SELECT COUNT(*) FROM SYSIBMADM.LOCKWAITS;'
++ echo abcd1234
++ su - db2inst1 -c 'db2 connect to pegadb USER db2inst1 USING abcd1234 > /dev/null 2>&1 && db2 -x "SELECT COUNT(*) FROM SYSIBMADM.LOCKWAITS;"'
Password: + lock_waits='SQL1024N  A database connection does not exist.  SQLSTATE=08003'
+ echo 'LockWaits:SQL1024N  A database connection does not exist.  SQLSTATE=08003'
LockWaits:SQL1024N  A database connection does not exist.  SQLSTATE=08003







#!/bin/bash

# DB2 connection details
DB_USER="your_db_username"
DB_PASS="your_db_password"
DB_NAME="pegadb"

# Function to execute DB2 queries
execute_db2_query() {
  echo "abcd1234" | su - db2inst1 -c "db2 connect to $DB_NAME > /dev/null 2>&1 && db2 -x \"$1\""
}

# Function to get db status
get_lock_waits() {
    execute_db2_query "SELECT COUNT(*) FROM SYSIBMADM.LOCKWAITS;"
}

lock_waits=$(get_lock_waits)
echo "LockWaits:$lock_waits"
[root@ASOMDWFDB404 tmp]# sh script.sh
LockWaits:SQL1024N  A database connection does not exist.  SQLSTATE=08003

https://github.com/ibmdb/perl_DBD-DB2/blob/master/README


https://teams.microsoft.com/l/meetup-join/19%3ameeting_MmMxZWZjY2ItYzY5Ni00OTNmLWJiZjktMmE5NGM2ZjNmZGJh%40thread.v2/0?context=%7b%22Tid%22%3a%22c1e54f3e-3101-4415-a1dc-ba2469e659e5%22%2c%22Oid%22%3a%22e99bf1ff-75e6-4fa4-a22d-87a33ecabf71%22%7d
Meeting ID: 457 924 464 814 
Passcode: qJDqk2 


https://stackoverflow.com/questions/7687159/how-to-convert-a-java-program-to-daemon-with-jsvc/7687991#7687991

https://github.com/glinuz/dbforbix-db2




system.run[ps -eo pid,comm,%cpu,%mem --sort=-%cpu | head -n 6,nowait]


Name: Top Memory Processes
Type: Zabbix agent
Key: system.run[powershell -Command "Get-Process | Sort-Object PM -Descending | Select-Object -First 5 | Format-Table -Property Id, ProcessName, CPU, PM -AutoSize"]
Type of information: Text
Update interval: 60s


Get-Process | Sort-Object PM -Descending | Select-Object -First 5 | Format-Table -Property Id, ProcessName, PM


UserParameter=top.cpu,/etc/zabbix/scripts/top_cpu.sh
UserParameter=top.mem,/etc/zabbix/scripts/top_mem.sh


#!/bin/bash
echo "Top 5 CPU Usage Processes:"
ps -eo pid,comm,%cpu,%mem --sort=-%cpu | head -n 6
echo ""
echo "Top 5 Memory Usage Processes:"
ps -eo pid,comm,%cpu,%mem --sort=-%mem | head -n 6



 25148:20240524:163046.213 there are no files matching "^\CallController-\d{4}-\d{2}-\d{2}_(0[0-9]|1[0-9]|2[0-3])hr\.log$" in "C:\logfiles\" or insufficient access rights





To retrieve details of the top five processes including their Process ID, User, CPU usage, Memory usage, and Process Command Line on a Windows host using Zabbix's `system.run` key, you'll need to use a combination of commands to extract and format the information. Here's how you can achieve this:

1. **Identify Top Five Processes**: You can use the `tasklist` command to list all running processes and then sort them based on CPU or memory usage to identify the top five processes.

2. **Construct the Command**: Combine `tasklist`, `findstr`, `sort`, and `head` commands to filter and format the output to display the details of the top five processes.

Here's an example command you can use in the Zabbix item key:

```plaintext
system.run[tasklist /v /fo csv | findstr /i /r /c:"\\[^\\]*$" | sort /r /+6 /c | head -n 5]
```

Let's break down the command:

- `tasklist /v /fo csv`: Lists all running processes in CSV format along with verbose information.
- `findstr /i /r /c:"\\[^\\]*$"`: Filters the processes to find lines ending with a backslash, which typically indicates a file process.
- `sort /r /+6 /c`: Sorts the filtered list in reverse order based on the sixth column, which represents the CPU or memory usage.
- `head -n 5`: Displays only the top five lines of the sorted output.

3. **Configure Zabbix Item**: Create a new item in the Zabbix frontend and use the constructed command as the key for the `system.run` command.

4. **Monitor and Verify**: Zabbix will execute the command at specified intervals. You can check the results in the Latest Data section under Monitoring > Latest data in the Zabbix frontend.

### Example Zabbix Item Key:
- `Key`: `system.run[tasklist /v /fo csv | findstr /i /r /c:"\\[^\\]*$" | sort /r /+6 /c | head -n 5]`

This command will return details of the top five processes including their Process ID, User, CPU usage, Memory usage, and Process Command Line. Adjust the command parameters as needed to fit your specific requirements.

Ensure to test the command outside of Zabbix to ensure it provides the desired output on your Windows system.


























Log in to Zabbix:
Log in to your Zabbix web interface with an account that has permissions to create templates and discovery rules.

Navigate to Configuration > Templates:
Select the template where you want to create the discovery rule or create a new template.

Create a Discovery Rule:

Go to the Discovery rules tab.
Click on Create discovery rule.
Fill in the Discovery Rule Details:

Name: Tablespaces
Type: ODBC or External check (depending on your DB2 setup and how you plan to connect to DB2)
Key: db2.discovery.tablespaces
Update interval: 1h (or as needed)
Type of information: Text
SNMP OID: Leave blank if using ODBC or external check
Database: Your DB2 connection details if using ODBC
Example for an ODBC Check:

Key: db2.discovery.tablespaces

Type: ODBC

Database: DB2 connection string

SQL query:

sql
Copy code
SELECT DISTINCT TBSP_NAME FROM SYSIBMADM.TBSP_UTILIZATION;
Create LLD Macros:

In the LLD macros section, define a macro for the tablespace name:
Macro: {#TABLESPACE}
Value: {#TBSP_NAME}
Save the Discovery Rule:

3. Create Item Prototypes
Go to Item Prototypes:

After creating the discovery rule, click on Item prototypes within the discovery rule.
Create Item Prototypes for Tablespace Monitoring:

Click on Create item prototype for each item you want to monitor.
Example Item Prototypes:

Total Size of Tablespace:

Name: Tablespace total size KB ({#TABLESPACE})

Type: ODBC or External check

Key: db2.tablespace.totalkb[{#TABLESPACE}]

Type of information: Numeric (unsigned)

Update interval: 30m (or as needed)

SQL query:

sql
Copy code
SELECT SUM(TBSP_TOTAL_SIZE_KB) 
FROM SYSIBMADM.TBSP_UTILIZATION 
WHERE TBSP_NAME='{#TABLESPACE}';
Used Size of Tablespace:

Name: Tablespace used size KB ({#TABLESPACE})

Type: ODBC or External check

Key: db2.tablespace.usedkb[{#TABLESPACE}]

Type of information: Numeric (unsigned)

Update interval: 30m (or as needed)

SQL query:

sql
Copy code
SELECT SUM(TBSP_USED_SIZE_KB) 
FROM SYSIBMADM.TBSP_UTILIZATION 
WHERE TBSP_NAME='{#TABLESPACE}';
Save the Item Prototypes:
4. Create Trigger Prototypes
Go to Trigger Prototypes:

After creating item prototypes, click on Trigger prototypes within the discovery rule.
Create Trigger Prototypes for Tablespace Monitoring:

Click on Create trigger prototype.
Example Trigger Prototypes:

Tablespace Free Space Warning:

Name: Tablespace free is < 20% ({#TABLESPACE})

Expression:

plaintext
Copy code
({TemplateName:db2.tablespace.totalkb[{#TABLESPACE}].last()}>0) and ({TemplateName:db2.tablespace.usedkb[{#TABLESPACE}].last()}>{TemplateName:db2.tablespace.totalkb[{#TABLESPACE}].last()}*0.8)
Severity: Warning

Save the Trigger Prototypes:
5. Verify the Configuration
Discovery Rule: Ensure the discovery rule is running and discovering tablespaces.
Items and Triggers: Check if items are being created based on the discovered tablespaces and if triggers are firing appropriately.
Additional Tips
Ensure your Zabbix server can connect to the DB2 database and has the necessary permissions.
Test your SQL queries directly on the DB2 database to make sure they return the expected results.
Adjust update intervals and thresholds as needed based on your monitoring requirements.
By following these steps, you can set up Zabbix to monitor DB2 tablespaces using a discovery rule, item prototypes, and trigger prototypes.








